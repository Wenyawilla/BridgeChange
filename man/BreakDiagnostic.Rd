% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BreakDiagnostic.R
\name{BreakDiagnostic}
\alias{BreakDiagnostic}
\title{Detect a break number using different metrics}
\usage{
BreakDiagnostic(
  y,
  X,
  mcmc = 100,
  burn = 100,
  verbose = 100,
  thin = 1,
  break.upper = 3
)
}
\arguments{
\item{mcmc}{The number of MCMC iterations after burnin.}

\item{verbose}{A switch which determines whether or not the progress of the
sampler is printed to the screen.  If \code{verbose} is greater than 0 the
iteration number, the \eqn{\beta} vector, and the error variance are
printed to the screen every \code{verbose}th iteration.}

\item{thin}{The thinning interval used in the simulation.  The number of
MCMC iterations must be divisible by this value.}

\item{break.upper}{Upper threshold for break number detection.
The default is \code{break.upper = 3}.}

\item{Y}{Reponse tensor}

\item{R}{Dimension of latent space. The default is 2.}

\item{burnin}{The number of burn-in iterations for the sampler.}

\item{degree.normal}{A null model for degree correction. Users can choose "NULL", "eigen" or "Lsym."
"NULL" is no degree correction. "eigen" is a principal eigen-matrix consisting of
the first eigenvalue and the corresponding eigenvector. "
Lsym" is a modularity matrix. Default is "eigen."}

\item{UL.Normal}{Transformation of sampled U. Users can choose "NULL", "Normal" or "Orthonormal."
"NULL" is no normalization. "Normal" is the standard normalization.
"Orthonormal" is the Gram-Schmidt orthgonalization. Default is "NULL."}

\item{v0}{\eqn{v_0/2} is the shape parameter for the inverse
Gamma prior on variance parameters for V.
If \code{v0 = NULL}, a value is computed from a test run of \code{NetworkStatic}.}

\item{v1}{\eqn{v_1/2} is the scale parameter for the
inverse Gamma prior on variance parameters for V.
If \code{v1 = NULL}, a value is computed from a test run of \code{NetworkStatic}.}
}
\description{
Detect a break number using different metrics
}
\examples{
   \dontrun{
   set.seed(1973)
   ## One break test
   out <- BridgeChangeSim(ntime=20, predictor = 10, n.break=1, constant.p =0, varying.p = 0.4, dgp.only=TRUE)

   ## Fit multiple models for break number detection using Bayesian model comparison
   detect <- BreakDiagnostic(y=out$y.c, X=out$x.c)
   
   ## Look at the graph
   detect[[1]]; print(detect[[2]])

   ## Two break test
   out <- BridgeChangeSim(ntime=20, predictor = 10, n.break=2, constant.p =0, varying.p = 0.4, dgp.only=TRUE)

   ## Fit multiple models for break number detection using Bayesian model comparison
   detect <- BreakDiagnostic(y=out$y.c, X=out$x.c)
   
   ## Look at the graph
   detect[[1]]; print(detect[[2]])
  
}


}
